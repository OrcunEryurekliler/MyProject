@model MyProject.WebUI.ViewModels.AppointmentBookingViewModel
@using MyProject.Core.Enums

@{
    ViewData["Title"] = "Randevu Al";
}

<h2>@ViewData["Title"]</h2>

<form asp-action="Book" method="post">
    <div class="form-group">
        <label asp-for="Specialization"></label>
        <select asp-for="Specialization" class="form-control" id="specDropdown">
            <option value="">-- Branş Seçin --</option>
            @foreach (var spec in ViewBag.Specializations as IEnumerable<Specialization>)
            {
                <option value="@spec">@spec</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label asp-for="Date"></label>
        <input asp-for="Date" class="form-control" type="date" id="datePicker" />
    </div>

    <div class="form-group">
        <label>Doktor</label>
        <select asp-for="DoctorProfileId" class="form-control" id="doctorDropdown">
            <option value="">-- Önce Branş ve Tarih Seçin --</option>
        </select>
    </div>

    <div class="form-group">
        <label>Saat</label>
        <select asp-for="TimeSlot" class="form-control" id="timeslotDropdown">
            <option value="">-- Doktor Seçildikten Sonra Yüklenir --</option>
        </select>
    </div>

    <input type="hidden" asp-for="DurationMinutes" />

    <button type="submit" class="btn btn-primary">Randevu Al</button>
</form>

@section Scripts {
    <script>
        const specEl   = document.getElementById('specDropdown');
        const dateEl   = document.getElementById('datePicker');
        const docEl    = document.getElementById('doctorDropdown');
        const slotEl   = document.getElementById('timeslotDropdown');

        specEl.addEventListener('change', loadDoctors);
        dateEl.addEventListener('change', loadDoctors);
        docEl.addEventListener('change', loadSlots);

        // Doktorları yüklemek için fonksiyon
                async function loadDoctors() {
            const spec = specEl.value, date = dateEl.value;
            console.log(`Branş: ${spec}, Tarih: ${date}`);
            slotEl.innerHTML = '<option value="">-- Doktor Seçin --</option>';
            if (!spec || !date) {
                console.log('Branş veya tarih seçilmedi!');
                return;
            }

            try {
                const res = await fetch(`/api/appointment/available-doctors?specialization=${spec}&date=${date}`);
                if (!res.ok) throw new Error('Doktorlar alınırken bir hata oluştu');
                const doctors = await res.json();
                console.log('Doktorlar:', doctors);

                docEl.innerHTML = '<option value="">-- Doktor Seçin --</option>';
                doctors.forEach(d => {
                    console.log(`Doktor: ${d.fullName} (${d.id})`);
                    docEl.innerHTML += `<option value="${d.id}">${d.fullName}</option>`;
                });
            } catch (error) {
                console.error('Hata:', error);
            }
        }


        // Saatleri yüklemek için fonksiyon
        async function loadSlots() {
            const docId = docEl.value, date = dateEl.value;
            console.log(`Doktor ID: ${docId}, Tarih: ${date}`);  // Doktor ID'sini ve tarihi kontrol et
            if (!docId || !date) {
                slotEl.innerHTML = '<option>-- Önce Doktor Seçin --</option>';
                return;
            }

            try {
                const res = await fetch(`/api/appointment/available-timeslots?doctorId=${docId}&date=${date}`);
                if (!res.ok) throw new Error('Saatler alınırken bir hata oluştu');
                const slots = await res.json();
                console.log('Saatler:', slots);  // Gelen saat verisini kontrol et

                slotEl.innerHTML = '<option value="">-- Saat Seçin --</option>';
                slots.forEach(s => {
                    slotEl.innerHTML += `<option value="${s}">${s}</option>`;
                });
            } catch (error) {
                console.error('Hata:', error);
            }
        }
    </script>
}
